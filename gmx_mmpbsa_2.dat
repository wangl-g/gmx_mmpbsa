$dump -quiet -s $tpr 2>>$err \
| awk >$qrv -v ndx=$ndx -v pro=$pro -v lig=$lig -v withLig=$withLig \
			-v radType=$radType -v radLJ0=$radLJ0 '
	BEGIN { RS="["
		print pro, lig
		while(getline < ndx) {
			gsub(" ","", $1); gsub("\t","", $1)
			if($1==pro)    for(i=3; i<=NF; i++) ndxPro[$i+0]++
			if($1==pro"]") for(i=2; i<=NF; i++) ndxPro[$i+0]++
			if(withLig) {
				if($1==lig)    for(i=3; i<=NF; i++) ndxLig[$i+0]++
				if($1==lig"]") for(i=2; i<=NF; i++) ndxLig[$i+0]++
			}
		}
		RS="\r?\n"
		nres=0
	}

	/#molblock/  { Ntyp=$3 }
	/moltype.+=/ { Imol=$3; getline; Nmol[Imol]=$3 }
	/ffparams:/ {
		getline Atyp; sub(/.+=/, "", Atyp); Atyp += 0
		print Atyp
		getline
		for(i=0; i<Atyp; i++) {
			printf "%6d", i
			for(j=0; j<Atyp; j++) {
				getline
				C6 =$0; sub(".*c6 *= *",  "", C6);  sub(",.*", "", C6);
				C12=$0; sub(".*c12 *= *", "", C12); sub(",.*", "", C12);
				printf " %s %s", C6, C12
				if(j==i) {
					sigma[i]=0; epsilon[i]=0
					Rad[i]=radLJ0
					if(C6*C12!=0) {
						sigma[i]=10*(C12/C6)^(1./6) # 转换单位为A
						epsilon[i]=C6^2/(4*C12)
						Rad[i]=.5*sigma[i]          # sigma为直径
					}
				}
			}
			print ""
		}
	}

	/moltype.+\(/ { Imol=$0; gsub(/[^0-9]/,"",Imol)
		getline txt; sub(/.*=/,"",txt); gsub(" ","_",txt)
		Name[Imol]=txt
		getline; getline txt;       gsub(/[^0-9]/,"",txt); Natm[Imol]=txt+0
		for(i=0; i<Natm[Imol]; i++) {
			getline; txt=$0; idx=$3; resID[Imol, i]=$(NF-2)+1+nres
			sub(",", "", idx);    idx += 0;
			Catm[Imol, i]=idx
			Ratm[Imol, i]=Rad[idx]
			Satm[Imol, i]=sigma[idx]
			Eatm[Imol, i]=epsilon[idx]
			sub(/.+q=/, "", txt); sub(/,.+/,  "", txt); Qatm[Imol, i]=txt
		}
		getline
		for(i=0; i<Natm[Imol]; i++) {
			getline txt
			sub(/.+=./, "", txt); sub(/..$/, "", txt)
			Tatm[Imol, i]=txt
		}
	}

	/residue\[/ { nres++
		txt=$0; sub(/.*nr=/,"",txt); sub(/,.*/,"",txt); txt*=1
		sub(/.*="/,"",$0); sub(/".*/,"",$0);
		resName[nres]=sprintf("%05d%s", txt, $0)
	}

	/^ +Angle:/ {
		getline; n=$2+0
		if(n>0) {
			getline
			while(getline) {
				if(!index($0, "ANGLES")) break
				k=$NF; j=$(NF-1); i=$(NF-2)
				tag=toupper(Tatm[Imol,i])
				if(substr(tag,1,1)=="H") Tatm[Imol,i]=sprintf("H%s", Tatm[Imol,j])
				tag=toupper(Tatm[Imol,k])
				if(substr(tag,1,1)=="H") Tatm[Imol,k]=sprintf("H%s", Tatm[Imol,j])
			}
		}
	}

	END {
		Ntot=0; Nidx=0
		for(i=0; i<Ntyp; i++) {
			for(n=0; n<Nmol[i]; n++) {
				for(j=0; j<Natm[i]; j++) {
					Ntot++
					if(Ntot in ndxPro || Ntot in ndxLig) {
						Nidx++
						if(radType==0) radi=Ratm[i, j]
						if(radType >0) radi=getRadi(Tatm[i, j], radType)
						printf "%6d %9.5f %9.6f %6d %9.6f %9.6f %6d %s %s %-6s  ",  \
						Nidx, Qatm[i,j], radi, Catm[i,j], Satm[i,j], Eatm[i,j], \
						Ntot, Name[i]"-"n+1"."j+1, \
						resName[resID[i,j]], Tatm[i, j]
						if(Ntot in ndxPro) print "Pro"
						if(Ntot in ndxLig) print "Lig"
					}
				}
			}
		}
	}

	function getRadi(tag, radType) { # mBondi from AMBER20/parmed/tools/changeradii.py
		radBondi["C" ]= 1.7  ; radBondi["H" ]= 1.2
		radBondi["N" ]= 1.55 ; radBondi["HC"]= 1.3
		radBondi["O" ]= 1.5  ; radBondi["HN"]= 1.3
		radBondi["F" ]= 1.5  ; radBondi["HP"]= 1.3
		radBondi["SI"]= 2.1  ; radBondi["HO"]= 0.8
		radBondi["P" ]= 1.85 ; radBondi["HS"]= 0.8
		radBondi["S" ]= 1.8  # radBondi["BR"]= 1.85
		radBondi["CL"]= 1.7  # radBondi["I" ]= 1.98

		tag=toupper(tag)
		if(length(tag)>=2) {
			if(radBondi[substr(tag,1,2)]) return radBondi[substr(tag,1,2)]
			else return radBondi[substr(tag,1,1)]
		} else {
			if(radBondi[tag]) return radBondi[tag]
			else return 1.5
		}
	}
'

[[ ! -f "$qrv" ]] && { echo -e "!!! ERROR !!! gmx dump Failed ! Check $err to find out why.\n"; exit; }

if [[ $isCAS -eq 1 ]]; then
################################################################################
# CAS: qrv pdb
################################################################################

awk -v qrv=$qrv -v cas="$cas" -v RS="\r?\n" '
	BEGIN {
		txt="NME Z ALA A ARG R ASN N ASP D ASH D CYS C CYM C CYX C "
		txt=txt"GLU E GLH E GLN Q GLY G HID H HIE H HIP H ILE I LEU L LYS K LYN K "
		txt=txt"MET M PHE F PRO P SER S THR T TRP W TYR Y VAL V"
		n=split(txt, arr)
		for(i=1; i<=n/2; i++) resnm[arr[2*i-1]]=arr[2*i]

		split(cas,arr,",")
		for(i in arr) {
			if(index(arr[i],":")) {
				n=split(arr[i], arr2, ":")
				s=1; if(n>2) s=arr2[3]
				for(j=arr2[1]; j<=arr2[2]; j+=s) resCAS[j]=1
			} else resCAS[arr[i]]=1
		}

		getline < qrv
		getline Atyp < qrv
		for(i=0; i<Atyp; i++) getline < qrv
		while(getline < qrv) {
			res=$(NF-2); gsub(/[0-9]+/,"",res)
			if(res=="ALA") { n=$(NF-1);
				Qala[n]=$2; Rala[n]=$3; Cala[n]=$4
				Sala[n]=$5; Eala[n]=$6
			}
		}
		close(qrv)

		out=qrv; sub(".qrv", "_CAS.qrv", out)
		getline < qrv;      print     >out
		getline Atyp < qrv; print Atyp>out
		for(i=0; i<Atyp; i++) { getline < qrv; print >out }
		while(getline < qrv) {
			res=$(NF-2); gsub(/[0-9]+/,"",res)
			idx=$(NF-2); gsub(/^0*/,"",idx); gsub(/[A-Z]+/,"",idx)
			atm=$(NF-1)

			if(!resCAS[idx]) print >out
			else {
				if(res=="GLY") {
				# CH3
				} else if(res=="PRO") {
				# HN
				} else if(  ( res=="SER" &&  atm=="OG"                ) \
						 || ( res=="THR" && (atm=="OG1"||atm=="CG2") )  \
						 || ((res=="ILE"||res=="VAL") && (atm=="CG1"||atm=="CG2") ) \
						 || ((res=="CYS"||res=="CYM"||res=="CYX") && atm=="SG"    ) \
						 || ( atm=="CG") ) atm="HB3"

				if(atm=="N"  || atm=="H"   || atm=="HN"  \
				|| atm=="C"  || atm=="O"                 \
				|| atm=="CA" || atm=="CB"  || atm=="HA"  || atm=="HCA" \
				|| atm=="HB" || atm=="HB1" || atm=="HB2" || atm=="HB3") {
					$2=Qala[atm]; $5=Sala[atm]
					$3=Rala[atm]; $6=Eala[atm]
					$4=Cala[atm]; $9=sprintf("%05d%s", idx, resnm[res]"2"resnm["ALA"])
					printf "%6d %9.5f %9.6f %6d %9.6f %9.6f %6d %s %s %-6s  %s\n",
						$1, $2, $3, $4, $5, $6, $7, $8, $9, atm, $11 >out
				}
			}
		}
		close(qrv)
	}

	/^ATOM/ {
		ATOM=substr($0,1,6)
		INDX=substr($0,7,5)+0; isCAS[INDX]=0
		NAME=substr($0,13,4); name=NAME; gsub(/ /,"", name)
		RES =substr($0,18,3)
		CHN =substr($0,22,1);  if(CHN=" ") CHN="A"
		NUM =substr($0,23,4)+0
		X=substr($0,31,8); X += 0
		Y=substr($0,39,8); Y += 0
		Z=substr($0,47,8); Z += 0

		if(resCAS[NUM]) {
			Rhb=1.1
			if(name=="CB") { Xcb=X; Ycb=Y; Zcb=Z }

			if(RES=="GLY") {
			# CH3
			} else if(RES=="PRO") {
			# HN
			} else if(  ( RES=="SER" &&  name=="OG"                ) \
					 || ( RES=="THR" && (name=="OG1"||name=="CG2") ) \
					 || ((RES=="ILE"||RES=="VAL") && (name=="CG1"||name=="CG2") ) \
					 || ((RES=="CYS"||RES=="CYM"||RES=="CYX") && name=="SG"     ) \
					 || ( name=="CG") ) {
				NAME=" HB "; name="HB"
				dx=X-Xcb; dy=Y-Ycb; dz=Z-Zcb
				r=sqrt(dx*dx+dy*dy+dz*dz)
				X=Xcb+Rhb*dx/r
				Y=Ycb+Rhb*dy/r
				Z=Zcb+Rhb*dz/r
			}

			RES=resnm[RES]"2"resnm["ALA"]
			if(!(name=="N"  || name=="H"  || name=="HN"  \
			  || name=="CA" || name=="HA"                \
			  || name=="CB" || name=="HB" || name=="HB1" || name=="HB2" || name=="HB3" \
			  || name=="C"  || name=="O")) next
		}
		printf("%-6s%5d %-4s %3s %s%4d    %8.3f%8.3f%8.3f\n", \
			ATOM, INDX, NAME, RES, CHN, NUM, X, Y, Z)
		next
	}
	{print}
' $pdb > ${pdb/.pdb/_CAS.pdb}
fi